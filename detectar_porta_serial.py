# -*- coding: utf-8 -*-
"""detectar_porta_serial

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mpa_5WpBimjR0vIYNerW9GqQgOilkQma
"""

#!/usr/bin/env python3
"""
Script para detectar e listar portas seriais disponíveis para radares
"""
import serial.tools.list_ports
import sys
import os

def detect_serial_ports():
    """Detecta todas as portas seriais disponíveis no sistema"""
    print("🔍 Detectando portas seriais disponíveis...")
    print("=" * 60)

    ports = list(serial.tools.list_ports.comports())

    if not ports:
        print("❌ Nenhuma porta serial encontrada!")
        print("\n💡 Dicas para solução:")
        print("   1. Verifique se os radares estão conectados via USB")
        print("   2. Verifique se os drivers estão instalados")
        print("   3. Tente desconectar e reconectar os dispositivos")
        return []

    radar_ports = []
    other_ports = []

    for i, port in enumerate(ports):
        print(f"{i+1}. 📋 Porta: {port.device}")
        print(f"     Descrição: {port.description}")
        print(f"     Hardware ID: {port.hwid}")

        # Verifica se parece ser um dispositivo de radar/ESP32/Arduino
        desc_lower = port.description.lower()
        is_radar_like = any(term in desc_lower for term in
                           ['usb', 'serial', 'uart', 'cp210', 'ch340', 'ft232',
                            'arduino', 'esp32', 'acm', 'jtag'])

        if is_radar_like:
            print(f"     ✅ Possível dispositivo radar/ESP32 detectado!")
            radar_ports.append({
                'device': port.device,
                'description': port.description,
                'hwid': port.hwid
            })
        else:
            print(f"     ⚠️  Pode não ser um dispositivo radar")
            other_ports.append({
                'device': port.device,
                'description': port.description,
                'hwid': port.hwid
            })
        print("-" * 40)

    return radar_ports, other_ports

def generate_config_template(radar_ports):
    """Gera um template de configuração baseado nas portas encontradas"""
    if not radar_ports:
        return

    print("\n🛠️  TEMPLATE DE CONFIGURAÇÃO")
    print("=" * 60)
    print("# Configure estas portas no arquivo dual_radar_gsheets.py")
    print("# na seção RADAR_CONFIGS:")
    print()

    for i, port in enumerate(radar_ports[:2]):  # Máximo 2 radares
        radar_id = f"RADAR_{i+1}"
        section_letter = chr(ord('A') + i)  # A, B, C...

        config = f"""    {{
        'id': '{radar_id}',
        'name': 'Radar Seção {section_letter}',
        'port': '{port['device']}',  # {port['description']}
        'baudrate': 115200,
        'spreadsheet_name': 'radar_dados_secao_{section_letter}',
        'color': '{"🔴" if i == 0 else "🔵"}'
    }},"""
        print(config)

def check_port_permissions(radar_ports):
    """Verifica se as portas têm permissões adequadas"""
    print("\n🔐 VERIFICAÇÃO DE PERMISSÕES")
    print("=" * 60)

    for port in radar_ports:
        device = port['device']
        try:
            # Tenta abrir a porta por um segundo para verificar permissões
            import serial
            test_serial = serial.Serial(device, timeout=1)
            test_serial.close()
            print(f"✅ {device}: Permissões OK")
        except serial.SerialException as e:
            if "permission denied" in str(e).lower():
                print(f"❌ {device}: Sem permissão de acesso")
                print(f"   💡 Execute: sudo chmod 666 {device}")
                print(f"   💡 Ou adicione seu usuário ao grupo dialout:")
                print(f"      sudo usermod -a -G dialout $USER")
            elif "busy" in str(e).lower():
                print(f"⚠️  {device}: Porta em uso por outro processo")
            else:
                print(f"❌ {device}: Erro - {e}")
        except Exception as e:
            print(f"❌ {device}: Erro inesperado - {e}")

def main():
    """Função principal"""
    print("🎯 DETECTOR DE PORTAS SERIAIS PARA DUAL RADAR")
    print("=" * 60)

    # Detecta portas
    radar_ports, other_ports = detect_serial_ports()

    # Resultados
    print(f"\n📊 RESUMO DA DETECÇÃO")
    print("=" * 60)
    print(f"🎯 Portas apropriadas para radares: {len(radar_ports)}")
    print(f"📱 Outras portas seriais: {len(other_ports)}")

    if len(radar_ports) >= 2:
        print(f"\n🎉 ÓTIMO! Encontradas {len(radar_ports)} portas para radares:")
        for i, port in enumerate(radar_ports[:2]):
            print(f"   🔸 Radar {i+1}: {port['device']} ({port['description']})")

        # Gera template de configuração
        generate_config_template(radar_ports)

        # Verifica permissões
        check_port_permissions(radar_ports)

        print(f"\n🚀 PRÓXIMOS PASSOS:")
        print("1. Copie a configuração acima para dual_radar_gsheets.py")
        print("2. Execute: python dual_radar_gsheets.py")
        print("3. Verifique se ambos os radares estão enviando dados")

    elif len(radar_ports) == 1:
        print(f"\n⚠️  ATENÇÃO: Apenas 1 porta encontrada:")
        print(f"   🔸 {radar_ports[0]['device']} ({radar_ports[0]['description']})")
        print(f"\n💡 Para usar 2 radares:")
        print("1. Conecte o segundo radar via USB")
        print("2. Execute este script novamente")
        print("3. Verifique se aparece uma segunda porta")

    else:
        print(f"\n❌ PROBLEMA: Nenhuma porta adequada encontrada!")
        print(f"\n🔧 SOLUÇÕES:")
        print("1. Verifique se os radares estão conectados")
        print("2. Instale drivers USB (CP210x, CH340, etc.)")
        print("3. Tente reconectar os dispositivos")
        print("4. Verifique com 'lsusb' se os dispositivos são reconhecidos")

    if other_ports:
        print(f"\n📋 Outras portas encontradas:")
        for port in other_ports:
            print(f"   🔹 {port['device']}: {port['description']}")

if __name__ == "__main__":
    main()