#include <Arduino.h>
#include "Seeed_Arduino_mmWave.h"

// Set up serial communication depending on the board type
#ifdef ESP32
#  include <HardwareSerial.h>
HardwareSerial mmWaveSerial(0);
#else
#  define mmWaveSerial Serial1
#endif

SEEED_MR60BHA2 mmWave;

// Variáveis para cálculo de velocidade
float last_distance = 0;
unsigned long last_time = 0;

void setup() {
  Serial.begin(115200);
  mmWave.begin(&mmWaveSerial);
  Serial.println("Sensor mmWave inicializado");
}

void loop() {
  if (mmWave.update(5000)) {
    // Inicia o bloco de dados
    Serial.println("-----Human Detected-----");
    
    // Obtém informações do alvo usando PeopleCounting
    PeopleCounting target_info;
    if (mmWave.getPeopleCountingTartgetInfo(target_info)) {
        Serial.printf("Number of targets: %zu\n", target_info.targets.size());

        for (size_t i = 0; i < target_info.targets.size(); i++) {
            const auto& target = target_info.targets[i];
            Serial.println("Target 1:");
            
            // Obtém as fases
            float total_phase = 0, breath_phase = 0, heart_phase = 0;
            if (mmWave.getHeartBreathPhases(total_phase, breath_phase, heart_phase)) {
                Serial.printf("total_phase: %.2f\n", total_phase);
                Serial.printf("breath_phase: %.2f\n", breath_phase);
                Serial.printf("heart_phase: %.2f\n", heart_phase);
            }

            // Obtém as taxas
            float breath_rate = 0;
            if (mmWave.getBreathRate(breath_rate)) {
                Serial.printf("breath_rate: %.2f\n", breath_rate);
            }

            float heart_rate = 0;
            if (mmWave.getHeartRate(heart_rate)) {
                Serial.printf("heart_rate: %.2f\n", heart_rate);
            }

            // Obtém a distância
            float distance = 0;
            if (mmWave.getDistance(distance)) {
                Serial.printf("distance: %.2f\n", distance);
            }

            // Envia os dados do alvo no formato esperado
            Serial.printf("x_point: %.2f\n", target.x_point);
            Serial.printf("y_point: %.2f\n", target.y_point);
            Serial.printf("dop_index: %d\n", target.dop_index);
            Serial.printf("cluster_index: %d\n", target.cluster_index);
            Serial.printf("move_speed: %.2f cm/s\n", target.dop_index * RANGE_STEP);
            
            // Linha em branco para separar as leituras
            Serial.println();
        }
    }
  }
  
  // Pequeno delay para estabilidade
  delay(50);
} 
