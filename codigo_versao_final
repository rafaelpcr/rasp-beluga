import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import logging
import os
import traceback
import time
import numpy as np
import uuid
import serial
import threading
import re
import math
from dotenv import load_dotenv

# Configura√ß√£o b√°sica de logging
logging.basicConfig(
    level=logging.DEBUG,  # Mudando para DEBUG para ver todas as mensagens
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('radar_serial.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('radar_serial_app')

# Configurando o n√≠vel de log para outros m√≥dulos
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('gspread').setLevel(logging.WARNING)

load_dotenv()

SERIAL_CONFIG = {
    'port': os.getenv('SERIAL_PORT', '/dev/ttyACM0'),
    'baudrate': int(os.getenv('SERIAL_BAUDRATE', 115200))
}
RANGE_STEP = 2.5

class GoogleSheetsManager:
    def __init__(self, creds_path, spreadsheet_name, worksheet_name='Sheet1'):
        logger.debug(f"üîç [GSHEETS_INIT] Iniciando GoogleSheetsManager...")
        logger.debug(f"üîç [GSHEETS_INIT] Caminho das credenciais: {creds_path}")
        logger.debug(f"üîç [GSHEETS_INIT] Nome da planilha: {spreadsheet_name}")
        logger.debug(f"üîç [GSHEETS_INIT] Nome da worksheet: {worksheet_name}")
        
        SCOPES = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive',
            'https://www.googleapis.com/auth/drive.file'
        ]
        
        logger.debug(f"üîç [GSHEETS_INIT] Carregando credenciais...")
        try:
            self.creds = Credentials.from_service_account_file(creds_path, scopes=SCOPES)
            logger.debug(f"üîç [GSHEETS_INIT] Credenciais carregadas com sucesso")
        except Exception as e:
            logger.error(f"‚ùå [GSHEETS_INIT] Erro ao carregar credenciais: {str(e)}")
            raise
        
        logger.debug(f"üîç [GSHEETS_INIT] Autorizando acesso ao Google Sheets...")
        try:
            self.gc = gspread.authorize(self.creds)
            logger.debug(f"üîç [GSHEETS_INIT] Autoriza√ß√£o bem-sucedida")
        except Exception as e:
            logger.error(f"‚ùå [GSHEETS_INIT] Erro na autoriza√ß√£o: {str(e)}")
            raise
        
        logger.debug(f"üîç [GSHEETS_INIT] Abrindo planilha '{spreadsheet_name}'...")
        try:
            self.spreadsheet = self.gc.open(spreadsheet_name)
            logger.debug(f"üîç [GSHEETS_INIT] Planilha aberta com sucesso")
        except Exception as e:
            logger.error(f"‚ùå [GSHEETS_INIT] Erro ao abrir planilha: {str(e)}")
            raise
        
        logger.debug(f"üîç [GSHEETS_INIT] Acessando worksheet '{worksheet_name}'...")
        try:
            self.worksheet = self.spreadsheet.worksheet(worksheet_name)
            logger.debug(f"üîç [GSHEETS_INIT] Worksheet acessada com sucesso")
            logger.info(f"‚úÖ [GSHEETS_INIT] GoogleSheetsManager inicializado com sucesso!")
        except Exception as e:
            logger.error(f"‚ùå [GSHEETS_INIT] Erro ao acessar worksheet: {str(e)}")
            raise

    def insert_radar_data(self, data):
        try:
            logger.debug(f"üîç [GSHEETS] Iniciando envio de dados para Google Sheets...")
            logger.debug(f"üîç [GSHEETS] Dados recebidos: {data}")
            logger.debug(f"üîç [GSHEETS] Tipo dos dados: {type(data)}")
            
            # Verificar se worksheet est√° dispon√≠vel
            logger.debug(f"üîç [GSHEETS] Verificando worksheet...")
            logger.debug(f"üîç [GSHEETS] self.worksheet: {self.worksheet}")
            logger.debug(f"üîç [GSHEETS] T√≠tulo da worksheet: {self.worksheet.title}")
            
            row = [
                data.get('session_id'),
                data.get('timestamp'),
                data.get('x_point'),
                data.get('y_point'),
                data.get('move_speed'),
                data.get('heart_rate'),
                data.get('breath_rate'),
                data.get('distance'),
                data.get('section_id'),
                data.get('product_id'),
                data.get('satisfaction_score'),
                data.get('satisfaction_class'),
                data.get('is_engaged')
            ]
            
            logger.debug(f"üîç [GSHEETS] Linha formatada: {row}")
            logger.debug(f"üîç [GSHEETS] Tipos dos valores na linha: {[type(x) for x in row]}")
            
            # Verificar se h√° valores None ou problem√°ticos
            problematic_values = []
            for i, value in enumerate(row):
                if value is None:
                    problematic_values.append(f"√≠ndice {i}: None")
                elif isinstance(value, (int, float)) and (value != value):  # NaN check
                    problematic_values.append(f"√≠ndice {i}: NaN")
                elif isinstance(value, str) and len(value) > 1000:  # String muito longa
                    problematic_values.append(f"√≠ndice {i}: string muito longa ({len(value)} chars)")
            
            if problematic_values:
                logger.warning(f"‚ö†Ô∏è [GSHEETS] Valores problem√°ticos encontrados: {problematic_values}")
            
            logger.debug(f"üîç [GSHEETS] Chamando worksheet.append_row()...")
            self.worksheet.append_row(row)
            logger.debug(f"üîç [GSHEETS] worksheet.append_row() executado com sucesso!")
            
            logger.info('‚úÖ Dados enviados para o Google Sheets!')
            logger.debug(f"üîç [GSHEETS] Envio conclu√≠do com sucesso!")
            return True
            
        except Exception as e:
            logger.error(f'‚ùå [GSHEETS] Erro ao enviar dados para o Google Sheets: {str(e)}')
            logger.error(f'‚ùå [GSHEETS] Tipo do erro: {type(e)}')
            logger.error(f'‚ùå [GSHEETS] Dados que causaram o erro: {data}')
            
            # Verifica√ß√µes espec√≠ficas para erros comuns
            error_msg = str(e).lower()
            if 'quota' in error_msg or 'rate' in error_msg:
                logger.error(f'‚ùå [GSHEETS] Erro de limite de taxa da API! Aguarde antes de tentar novamente.')
                logger.error(f'‚ùå [GSHEETS] Considere adicionar delays entre as requisi√ß√µes.')
            elif 'permission' in error_msg or 'forbidden' in error_msg:
                logger.error(f'‚ùå [GSHEETS] Erro de permiss√£o! Verifique as credenciais e permiss√µes da planilha.')
            elif 'not found' in error_msg:
                logger.error(f'‚ùå [GSHEETS] Planilha ou worksheet n√£o encontrada! Verifique o nome da planilha.')
            elif 'authentication' in error_msg or 'auth' in error_msg:
                logger.error(f'‚ùå [GSHEETS] Erro de autentica√ß√£o! Verifique o arquivo de credenciais.')
            else:
                logger.error(f'‚ùå [GSHEETS] Erro desconhecido da API do Google Sheets.')
            
            logger.error(traceback.format_exc())
            return False

def parse_serial_data(raw_data):
    try:
        logger.debug(f"üîç [PARSE] Iniciando parse dos dados seriais...")
        logger.debug(f"üîç [PARSE] Dados brutos recebidos: {repr(raw_data)}")
        logger.debug(f"üîç [PARSE] Tamanho dos dados: {len(raw_data)} caracteres")
        
        # Verifica√ß√£o detalhada dos marcadores
        has_human_detected = '-----Human Detected-----' in raw_data
        has_target_1 = 'Target 1:' in raw_data
        
        logger.debug(f"üîç [PARSE] Verifica√ß√£o de marcadores:")
        logger.debug(f"   '-----Human Detected-----' encontrado: {has_human_detected}")
        logger.debug(f"   'Target 1:' encontrado: {has_target_1}")
        
        # Mostrar algumas linhas do conte√∫do para debug
        lines = raw_data.split('\n')
        logger.debug(f"üîç [PARSE] N√∫mero de linhas: {len(lines)}")
        logger.debug(f"üîç [PARSE] Primeiras 5 linhas:")
        for i, line in enumerate(lines[:5]):
            logger.debug(f"   Linha {i+1}: {repr(line)}")
        
        # Regex ainda mais tolerante: aceita espa√ßos extras, quebras de linha e mai√∫sculas/min√∫sculas
        x_pattern = r'x_point\s*:\s*([-+]?\d*\.?\d+)'  # aceita inteiro ou float, sinal opcional
        y_pattern = r'y_point\s*:\s*([-+]?\d*\.?\d+)'
        dop_pattern = r'dop_index\s*:\s*([-+]?\d+)'  # aceita sinal opcional
        cluster_pattern = r'cluster_index\s*:\s*(\d+)'
        speed_pattern = r'move_speed\s*:\s*([-+]?\d*\.?\d+)\s*cm/s'
        total_phase_pattern = r'total_phase\s*:\s*([-+]?\d*\.?\d+)'
        breath_phase_pattern = r'breath_phase\s*:\s*([-+]?\d*\.?\d+)'
        heart_phase_pattern = r'heart_phase\s*:\s*([-+]?\d*\.?\d+)'
        breath_rate_pattern = r'breath_rate\s*:\s*([-+]?\d*\.?\d+)'
        heart_rate_pattern = r'heart_rate\s*:\s*([-+]?\d*\.?\d+)'
        distance_pattern = r'distance\s*:\s*([-+]?\d*\.?\d+)'
        
        # Usar flags re.IGNORECASE para aceitar mai√∫sculas/min√∫sculas
        if '-----Human Detected-----' not in raw_data:
            logger.debug(f"üîç [PARSE] Marcador 'Human Detected' n√£o encontrado - ignorando dados")
            return None
        if 'Target 1:' not in raw_data:
            logger.debug(f"üîç [PARSE] Marcador 'Target 1:' n√£o encontrado - ignorando dados")
            return None
            
        logger.debug(f"üîç [PARSE] Marcadores encontrados - iniciando extra√ß√£o dos campos...")
        
        x_match = re.search(x_pattern, raw_data, re.IGNORECASE)
        y_match = re.search(y_pattern, raw_data, re.IGNORECASE)
        dop_match = re.search(dop_pattern, raw_data, re.IGNORECASE)
        cluster_match = re.search(cluster_pattern, raw_data, re.IGNORECASE)
        speed_match = re.search(speed_pattern, raw_data, re.IGNORECASE)
        total_phase_match = re.search(total_phase_pattern, raw_data, re.IGNORECASE)
        breath_phase_match = re.search(breath_phase_pattern, raw_data, re.IGNORECASE)
        heart_phase_match = re.search(heart_phase_pattern, raw_data, re.IGNORECASE)
        breath_rate_match = re.search(breath_rate_pattern, raw_data, re.IGNORECASE)
        heart_rate_match = re.search(heart_rate_pattern, raw_data, re.IGNORECASE)
        distance_match = re.search(distance_pattern, raw_data, re.IGNORECASE)
        
        logger.debug(f"üîç [PARSE] Matches encontrados:")
        logger.debug(f"   x_point: {x_match.group(1) if x_match else 'N/A'}")
        logger.debug(f"   y_point: {y_match.group(1) if y_match else 'N/A'}")
        logger.debug(f"   dop_index: {dop_match.group(1) if dop_match else 'N/A'}")
        logger.debug(f"   move_speed: {speed_match.group(1) if speed_match else 'N/A'}")
        logger.debug(f"   heart_rate: {heart_rate_match.group(1) if heart_rate_match else 'N/A'}")
        logger.debug(f"   breath_rate: {breath_rate_match.group(1) if breath_rate_match else 'N/A'}")
        logger.debug(f"   distance: {distance_match.group(1) if distance_match else 'N/A'}")
        
        if x_match and y_match:
            logger.debug(f"üîç [PARSE] Campos obrigat√≥rios encontrados - criando estrutura de dados...")
            
            data = {
                'x_point': float(x_match.group(1)),
                'y_point': float(y_match.group(1)),
                'dop_index': int(dop_match.group(1)) if dop_match else 0,
                'cluster_index': int(cluster_match.group(1)) if cluster_match else 0,
                'move_speed': float(speed_match.group(1))/100 if speed_match else 0.0,
                'total_phase': float(total_phase_match.group(1)) if total_phase_match else 0.0,
                'breath_phase': float(breath_phase_match.group(1)) if breath_phase_match else 0.0,
                'heart_phase': float(heart_phase_match.group(1)) if heart_phase_match else 0.0,
                'breath_rate': float(breath_rate_match.group(1)) if breath_rate_match else None,
                'heart_rate': float(heart_rate_match.group(1)) if heart_rate_match else None,
                'distance': float(distance_match.group(1)) if distance_match else None
            }
            
            if data['distance'] is None:
                data['distance'] = math.sqrt(data['x_point']**2 + data['y_point']**2)
                logger.debug(f"üîç [PARSE] Dist√¢ncia calculada: {data['distance']:.2f}")
            
            if data['heart_rate'] is None:
                data['heart_rate'] = 75.0
                logger.debug(f"üîç [PARSE] Heart rate padr√£o aplicado: {data['heart_rate']}")
            
            if data['breath_rate'] is None:
                data['breath_rate'] = 15.0
                logger.debug(f"üîç [PARSE] Breath rate padr√£o aplicado: {data['breath_rate']}")
            
            logger.debug(f"üîç [PARSE] Dados parseados com sucesso: {data}")
            return data
        else:
            logger.debug(f"üîç [PARSE] Campos obrigat√≥rios n√£o encontrados - retornando None")
            return None
    except Exception as e:
        logger.error(f"‚ùå Erro ao analisar dados seriais: {str(e)}")
        logger.error(traceback.format_exc())
        return None

def convert_radar_data(raw_data):
    """Converte dados brutos do radar para o formato do banco de dados"""
    try:
        # Verificar se j√° √© um dicion√°rio
        if isinstance(raw_data, dict):
            data = raw_data
        else:
            # Tentar parsear como JSON primeiro
            try:
                data = json.loads(raw_data)
            except:
                # Se n√£o for JSON, tentar parsear como texto da serial
                data = parse_serial_data(raw_data)
                if not data:
                    return None

        # Garantir que todos os campos necess√°rios est√£o presentes
        result = {
            'x_point': float(data.get('x_point', 0)),
            'y_point': float(data.get('y_point', 0)),
            'move_speed': float(data.get('move_speed', 0)),
            'heart_rate': float(data.get('heart_rate', 75)),
            'breath_rate': float(data.get('breath_rate', 15))
        }

        return result
    except Exception as e:
        logger.error(f"Erro ao converter dados do radar: {str(e)}")
        logger.error(traceback.format_exc())
        return None

class ShelfManager:
    def __init__(self):
        self.SECTION_WIDTH = 0.5  # metros
        self.SECTION_HEIGHT = 0.3  # metros
        self.MAX_SECTIONS_X = 3
        self.MAX_SECTIONS_Y = 1
        self.SCALE_FACTOR = 1  # N√£o precisa mais de escala
        self.sections = [
            {
                'section_id': 1,
                'section_name': 'Se√ß√£o 1',
                'product_id': '1',
                'x_start': 0.0,
                'y_start': 0.0,
                'x_end': 0.5,
                'y_end': 1.5
            },
            {
                'section_id': 2,
                'section_name': 'Se√ß√£o 2',
                'product_id': '2',
                'x_start': 0.5,
                'y_start': 0.0,
                'x_end': 1.0,
                'y_end': 1.5
            },
            {
                'section_id': 3,
                'section_name': 'Se√ß√£o 3',
                'product_id': '3',
                'x_start': 1.0,
                'y_start': 0.0,
                'x_end': 1.5,
                'y_end': 1.5
            }
        ]

    def get_section_at_position(self, x, y, db_manager=None):
        logger.debug(f"Coordenadas recebidas - X: {x:.2f}m, Y: {y:.2f}m")
        if x < -1.0 or x > 1.0 or y < 0 or y > 1.5:
            logger.debug(f"‚ö†Ô∏è Coordenadas fora dos limites m√°ximos")
            return None
        for section in self.sections:
            logger.debug(f"Verificando se√ß√£o {section['section_name']} - X: {section['x_start']:.2f} a {section['x_end']:.2f}m")
            if (section['x_start'] <= x <= section['x_end'] and section['y_start'] <= y <= section['y_end']):
                logger.debug(f"‚úÖ Se√ß√£o encontrada: {section['section_name']}")
                return section
        logger.debug("‚ùå Nenhuma se√ß√£o encontrada para as coordenadas fornecidas")
        return None

shelf_manager = ShelfManager()

class AnalyticsManager:
    def __init__(self):
        self.MOVEMENT_THRESHOLD = 20.0  # cm/s
        self.DISTANCE_THRESHOLD = 2.0   # metros
        self.HEART_RATE_NORMAL = (60, 100)  # bpm
        self.BREATH_RATE_NORMAL = (12, 20)  # rpm

    def calculate_satisfaction_score(self, move_speed, heart_rate, breath_rate, distance):
        try:
            score = 0.0
            if move_speed is not None:
                if move_speed <= self.MOVEMENT_THRESHOLD:
                    score += 30
                else:
                    score += max(0, 30 * (1 - move_speed/100))
            if distance is not None:
                if distance <= self.DISTANCE_THRESHOLD:
                    score += 20
                else:
                    score += max(0, 20 * (1 - distance/5))
            if heart_rate is not None:
                if self.HEART_RATE_NORMAL[0] <= heart_rate <= self.HEART_RATE_NORMAL[1]:
                    score += 25
                else:
                    deviation = min(
                        abs(heart_rate - self.HEART_RATE_NORMAL[0]),
                        abs(heart_rate - self.HEART_RATE_NORMAL[1])
                    )
                    score += max(0, 25 * (1 - deviation/50))
            if breath_rate is not None:
                if self.BREATH_RATE_NORMAL[0] <= breath_rate <= self.BREATH_RATE_NORMAL[1]:
                    score += 25
                else:
                    deviation = min(
                        abs(breath_rate - self.BREATH_RATE_NORMAL[0]),
                        abs(breath_rate - self.BREATH_RATE_NORMAL[1])
                    )
                    score += max(0, 25 * (1 - deviation/20))
            if score >= 85:
                classification = "MUITO_POSITIVA"
            elif score >= 70:
                classification = "POSITIVA"
            elif score >= 50:
                classification = "NEUTRA"
            elif score >= 30:
                classification = "NEGATIVA"
            else:
                classification = "MUITO_NEGATIVA"
            return (score, classification)
        except Exception as e:
            logger.error(f"Erro ao calcular satisfa√ß√£o: {str(e)}")
            return (50.0, "NEUTRA")

class VitalSignsManager:
    def __init__(self):
        self.SAMPLE_RATE = 20
        self.heart_phase_buffer = []
        self.breath_phase_buffer = []
        self.quality_buffer = []
        self.HEART_BUFFER_SIZE = 20
        self.BREATH_BUFFER_SIZE = 30
        self.QUALITY_BUFFER_SIZE = 10
        self.last_heart_rate = None
        self.last_breath_rate = None
        self.last_quality_score = 0
        self.MIN_QUALITY_SCORE = 0.3
        self.STABILITY_THRESHOLD = 0.4
        self.VALID_RANGES = {
            'heart_rate': (40, 140),
            'breath_rate': (8, 25)
        }
        self.heart_rate_history = []
        self.breath_rate_history = []
        self.HISTORY_SIZE = 10

    def calculate_signal_quality(self, phase_data, distance):
        try:
            if not phase_data or len(phase_data) < 1:
                return 0.0
                
            # Se for um √∫nico valor, criar uma lista com ele
            if isinstance(phase_data, (int, float)):
                phase_data = [phase_data]
                
            distance_score = 1.0
            if distance < 30 or distance > 150:
                distance_score = 0.0
            elif distance > 100:
                distance_score = 1.0 - ((distance - 100) / 50)
                
            # Para um √∫nico valor, usar uma vari√¢ncia m√≠nima
            variance = 0.1 if len(phase_data) == 1 else np.var(phase_data)
            variance_score = 1.0 / (1.0 + variance * 10)
            
            # Para um √∫nico valor, usar uma amplitude m√≠nima
            amplitude = 0.1 if len(phase_data) == 1 else np.ptp(phase_data)
            amplitude_score = 1.0
            if amplitude < 0.01 or amplitude > 1.0:
                amplitude_score = 0.5
                
            quality_score = (distance_score * 0.3 +
                           variance_score * 0.4 +
                           amplitude_score * 0.3)
                           
            self.quality_buffer.append(quality_score)
            if len(self.quality_buffer) > self.QUALITY_BUFFER_SIZE:
                self.quality_buffer.pop(0)
                
            self.last_quality_score = np.mean(self.quality_buffer)
            return self.last_quality_score
            
        except Exception as e:
            logger.error(f"Erro ao calcular qualidade do sinal: {str(e)}")
            return 0.0

    def calculate_vital_signs(self, total_phase, breath_phase, heart_phase, distance):
        try:
            # Converter os valores de fase para listas se forem floats
            if isinstance(heart_phase, (int, float)):
                heart_phase = [heart_phase]
            if isinstance(breath_phase, (int, float)):
                breath_phase = [breath_phase]
                
            quality_score = self.calculate_signal_quality(heart_phase, distance)
            logger.debug(f"Qualidade do sinal: {quality_score:.2f}")
            if quality_score < self.MIN_QUALITY_SCORE:
                logger.debug(f"‚ö†Ô∏è Qualidade do sinal muito baixa: {quality_score:.2f}")
                return None, None
            self.heart_phase_buffer.append(heart_phase)
            self.breath_phase_buffer.append(breath_phase)
            while len(self.heart_phase_buffer) > self.HEART_BUFFER_SIZE:
                self.heart_phase_buffer.pop(0)
            while len(self.breath_phase_buffer) > self.BREATH_BUFFER_SIZE:
                self.breath_phase_buffer.pop(0)
            if len(self.heart_phase_buffer) < self.HEART_BUFFER_SIZE * 0.7:
                logger.debug(f"‚è≥ Aguardando mais dados ({len(self.heart_phase_buffer)}/{self.HEART_BUFFER_SIZE})")
                return None, None
            heart_weights = np.hamming(len(self.heart_phase_buffer))
            breath_weights = np.hamming(len(self.breath_phase_buffer))
            heart_smooth = np.average(self.heart_phase_buffer, weights=heart_weights)
            breath_smooth = np.average(self.breath_phase_buffer, weights=breath_weights)
            heart_rate = self._calculate_rate_from_phase(
                self.heart_phase_buffer,
                min_freq=self.VALID_RANGES['heart_rate'][0]/60,
                max_freq=self.VALID_RANGES['heart_rate'][1]/60,
                rate_multiplier=60
            )
            breath_rate = self._calculate_rate_from_phase(
                self.breath_phase_buffer,
                min_freq=self.VALID_RANGES['breath_rate'][0]/60,
                max_freq=self.VALID_RANGES['breath_rate'][1]/60,
                rate_multiplier=60
            )
            if heart_rate:
                if self.last_heart_rate:
                    rate_change = abs(heart_rate - self.last_heart_rate) / self.last_heart_rate
                    if rate_change > self.STABILITY_THRESHOLD:
                        logger.debug(f"‚ö†Ô∏è Mudan√ßa brusca nos batimentos: {rate_change:.2f}")
                        heart_rate = (heart_rate + self.last_heart_rate) / 2
                    else:
                        self.last_heart_rate = heart_rate
                else:
                    self.last_heart_rate = heart_rate
                self.heart_rate_history.append(heart_rate)
                if len(self.heart_rate_history) > self.HISTORY_SIZE:
                    self.heart_rate_history.pop(0)
            if breath_rate:
                if self.last_breath_rate:
                    rate_change = abs(breath_rate - self.last_breath_rate) / self.last_breath_rate
                    if rate_change > self.STABILITY_THRESHOLD:
                        logger.debug(f"‚ö†Ô∏è Mudan√ßa brusca na respira√ß√£o: {rate_change:.2f}")
                        breath_rate = None
                    else:
                        self.last_breath_rate = breath_rate
                else:
                    self.last_breath_rate = breath_rate
                self.breath_rate_history.append(breath_rate)
                if len(self.breath_rate_history) > self.HISTORY_SIZE:
                    self.breath_rate_history.pop(0)
            if heart_rate and breath_rate:
                logger.debug(f"‚úÖ Medi√ß√£o v√°lida - HR: {heart_rate:.1f} bpm, BR: {breath_rate:.1f} rpm")
            return heart_rate, breath_rate
        except Exception as e:
            logger.error(f"Erro ao calcular sinais vitais: {str(e)}")
            logger.error(traceback.format_exc())
            return None, None

    def _calculate_rate_from_phase(self, phase_data, min_freq, max_freq, rate_multiplier):
        try:
            if not phase_data:
                return None
            phase_mean = np.mean(phase_data)
            centered_phase = np.array(phase_data) - phase_mean
            window = np.hanning(len(centered_phase))
            windowed_phase = centered_phase * window
            fft_result = np.fft.fft(windowed_phase)
            fft_freq = np.fft.fftfreq(len(windowed_phase), d=1/self.SAMPLE_RATE)
            valid_idx = np.where((fft_freq >= min_freq) & (fft_freq <= max_freq))[0]
            if len(valid_idx) == 0:
                return None
            magnitude_spectrum = np.abs(fft_result[valid_idx])
            peak_idx = np.argmax(magnitude_spectrum)
            dominant_freq = fft_freq[valid_idx[peak_idx]]
            peak_magnitude = magnitude_spectrum[peak_idx]
            avg_magnitude = np.mean(magnitude_spectrum)
            if peak_magnitude < 1.5 * avg_magnitude:
                return None
            rate = abs(dominant_freq * rate_multiplier)
            return round(rate, 1)
        except Exception as e:
            logger.error(f"Erro ao calcular taxa a partir da fase: {str(e)}")
            return None

class SerialRadarManager:
    def __init__(self, port=None, baudrate=115200):
        self.port = port or SERIAL_CONFIG['port']
        self.baudrate = baudrate or SERIAL_CONFIG['baudrate']
        self.serial_connection = None
        self.is_running = False
        self.receive_thread = None
        self.db_manager = None
        self.analytics_manager = AnalyticsManager()
        self.vital_signs_manager = VitalSignsManager()
        self.current_session_id = None
        self.last_activity_time = None
        self.SESSION_TIMEOUT = 60  # 1 minuto para identificar novas pessoas
        self.last_valid_data_time = time.time()  # Timestamp do √∫ltimo dado v√°lido
        self.RESET_TIMEOUT = 60  # 1 minuto
        # Buffer para engajamento
        self.engagement_buffer = []
        self.ENGAGEMENT_WINDOW = 1
        self.ENGAGEMENT_DISTANCE = 1.0
        self.ENGAGEMENT_SPEED = 10.0
        self.ENGAGEMENT_MIN_COUNT = 1
        # Par√¢metros para detec√ß√£o de pessoas
        self.last_position = None
        self.POSITION_THRESHOLD = 0.5
        self.MOVEMENT_THRESHOLD = 20.0
        self.session_positions = []
        
        # Contadores para debug
        self.messages_received = 0
        self.messages_processed = 0
        self.messages_failed = 0

    def _generate_session_id(self):
        """Gera um novo ID de sess√£o"""
        return str(uuid.uuid4())

    def _check_session_timeout(self):
        """Verifica se a sess√£o atual expirou"""
        if self.last_activity_time and (time.time() - self.last_activity_time) > self.SESSION_TIMEOUT:
            logger.debug("Sess√£o expirada, gerando nova sess√£o")
            self.current_session_id = self._generate_session_id()
            self.last_activity_time = time.time()
            self.session_positions = []  # Limpa hist√≥rico de posi√ß√µes
            return True
        return False

    def _is_new_person(self, x, y, move_speed):
        """Verifica se os dados indicam uma nova pessoa"""
        if not self.last_position:
            return True

        last_x, last_y = self.last_position
        distance = math.sqrt((x - last_x)**2 + (y - last_y)**2)
        
        # Se a dist√¢ncia for muito grande ou a velocidade for muito alta, provavelmente √© uma nova pessoa
        if distance > self.POSITION_THRESHOLD or move_speed > self.MOVEMENT_THRESHOLD:
            return True
            
        # Verifica se o movimento √© consistente com a √∫ltima posi√ß√£o
        if len(self.session_positions) >= 2:
            last_positions = self.session_positions[-2:]
            avg_speed = sum(p['speed'] for p in last_positions) / len(last_positions)
            if abs(move_speed - avg_speed) > self.MOVEMENT_THRESHOLD:
                return True
                
        return False

    def _update_session(self):
        """Atualiza ou cria uma nova sess√£o"""
        current_time = time.time()
        
        # Verifica timeout da sess√£o
        if not self.current_session_id or self._check_session_timeout():
            self.current_session_id = self._generate_session_id()
            self.last_activity_time = current_time
            self.session_positions = []  # Limpa hist√≥rico de posi√ß√µes
            logger.debug(f"Nova sess√£o iniciada: {self.current_session_id}")
        else:
            self.last_activity_time = current_time

    def find_serial_port(self):
        import serial.tools.list_ports
        ports = list(serial.tools.list_ports.comports())
        if not ports:
            logger.error("Nenhuma porta serial encontrada!")
            return None
        for port in ports:
            desc_lower = port.description.lower()
            if any(term in desc_lower for term in
                  ['usb', 'serial', 'uart', 'cp210', 'ch340', 'ft232', 'arduino', 'esp32']):
                logger.info(f"Porta serial encontrada: {port.device} ({port.description})")
                return port.device
        logger.info(f"Usando primeira porta serial dispon√≠vel: {ports[0].device}")
        return ports[0].device

    def connect(self):
        logger.debug(f"üîç [CONNECT] Iniciando processo de conex√£o...")
        logger.debug(f"üîç [CONNECT] Porta configurada: {self.port}")
        logger.debug(f"üîç [CONNECT] Verificando se porta existe: {os.path.exists(self.port) if self.port else 'Porta n√£o definida'}")
        
        # Se a porta n√£o existir mais, tenta detectar automaticamente
        if not self.port or not os.path.exists(self.port):
            logger.warning(f"‚ö†Ô∏è Porta serial {self.port} n√£o encontrada. Tentando detectar automaticamente...")
            logger.debug(f"üîç [CONNECT] Iniciando detec√ß√£o autom√°tica de porta...")
            
            detected_port = self.find_serial_port()
            if detected_port:
                logger.debug(f"üîç [CONNECT] Porta detectada: {detected_port}")
                self.port = detected_port
                logger.info(f"‚úÖ Porta serial detectada automaticamente: {self.port}")
            else:
                logger.error("‚ùå Nenhuma porta serial dispon√≠vel para conex√£o!")
                logger.debug(f"üîç [CONNECT] Detec√ß√£o autom√°tica falhou - nenhuma porta encontrada")
                return False
        
        try:
            logger.info(f"üîÑ Conectando √† porta serial {self.port} (baudrate: {self.baudrate})...")
            logger.debug(f"üîç [CONNECT] Tentando abrir conex√£o serial...")
            
            self.serial_connection = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                timeout=1,
                write_timeout=1,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE
            )
            
            logger.debug(f"üîç [CONNECT] Conex√£o serial criada, aguardando estabiliza√ß√£o...")
            time.sleep(2)
            
            logger.debug(f"üîç [CONNECT] Verificando se conex√£o est√° aberta: {self.serial_connection.is_open}")
            
            logger.info(f"‚úÖ Conex√£o serial estabelecida com sucesso!")
            logger.debug(f"üîç [CONNECT] Conex√£o estabelecida com sucesso!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar √† porta serial: {str(e)}")
            logger.debug(f"üîç [CONNECT] Erro detalhado: {str(e)}")
            logger.error(traceback.format_exc())
            return False

    def start(self, db_manager):
        logger.debug(f"üîç [START] Iniciando SerialRadarManager...")
        logger.debug(f"üîç [START] db_manager recebido: {db_manager}")
        logger.debug(f"üîç [START] Tipo do db_manager: {type(db_manager)}")
        
        self.db_manager = db_manager
        logger.debug(f"üîç [START] db_manager atribu√≠do: {self.db_manager}")
        logger.debug(f"üîç [START] self.db_manager √© None: {self.db_manager is None}")
        
        if not self.connect():
            logger.error(f"üîç [START] Falha na conex√£o serial")
            return False
        
        self.is_running = True
        self.receive_thread = threading.Thread(target=self.receive_data_loop)
        self.receive_thread.daemon = True
        self.receive_thread.start()
        
        logger.info("‚úÖ Receptor de dados seriais iniciado!")
        logger.debug(f"üîç [START] Thread iniciada: {self.receive_thread.is_alive()}")
        return True

    def stop(self):
        self.is_running = False
        if self.serial_connection:
            try:
                self.serial_connection.close()
            except:
                pass
        if self.receive_thread and self.receive_thread.is_alive():
            self.receive_thread.join(timeout=2)
        logger.info("Receptor de dados seriais parado!")

    def hardware_reset_esp32(self):
        """
        Reinicia a ESP32 via pulso nas linhas DTR/RTS da porta serial.
        N√£o interfere na conex√£o principal do radar.
        """
        try:
            logger.warning("[ESP32 RESET] Iniciando reset via DTR/RTS na porta serial...")
            # Fecha a conex√£o principal se estiver aberta
            was_open = False
            if self.serial_connection and self.serial_connection.is_open:
                self.serial_connection.close()
                was_open = True
            # Abre uma conex√£o tempor√°ria s√≥ para reset
            with serial.Serial(self.port, self.baudrate, timeout=1) as ser:
                ser.setDTR(False)
                ser.setRTS(True)
                time.sleep(0.1)
                ser.setDTR(True)
                ser.setRTS(False)
                time.sleep(0.1)
            logger.info("[ESP32 RESET] Pulso de reset enviado com sucesso!")
            # Reabre a conex√£o principal se estava aberta
            if was_open:
                self.connect()
            return True
        except Exception as e:
            logger.error(f"[ESP32 RESET] Falha ao resetar ESP32: {e}")
            logger.error(traceback.format_exc())
            return False

    def receive_data_loop(self):
        buffer = ""
        message_mode = False
        message_buffer = ""
        target_data_complete = False
        last_data_time = time.time()
        if not hasattr(self, 'last_valid_data_time'):
            self.last_valid_data_time = time.time()
        self.RESET_TIMEOUT = 60  # 1 minuto
        
        logger.info("\nüîÑ Iniciando loop de recebimento de dados...")
        logger.debug(f"üîç [SERIAL] Configura√ß√µes: porta={self.port}, baudrate={self.baudrate}")
        logger.info(f"üîç [SERIAL] Aguardando dados da ESP32...")
        
        # Contador para mostrar atividade
        loop_count = 0
        last_activity_log = time.time()
        
        while self.is_running:
            try:
                loop_count += 1
                
                if not self.serial_connection.is_open:
                    logger.warning("‚ö†Ô∏è Conex√£o serial fechada, tentando reconectar...")
                    self.connect()
                    time.sleep(1)
                    continue
                
                in_waiting = self.serial_connection.in_waiting
                if in_waiting is None:
                    in_waiting = 0
                
                # Mostra atividade a cada 100 loops (aproximadamente 1 segundo)
                if loop_count % 100 == 0:
                    current_time = time.time()
                    time_since_last = current_time - last_activity_log
                    logger.debug(f"üîç [SERIAL] Loop #{loop_count} - Tempo desde √∫ltimo dado: {time_since_last:.1f}s")
                    last_activity_log = current_time
                    
                logger.debug(f"üîç [SERIAL] Bytes dispon√≠veis: {in_waiting}")
                
                data = self.serial_connection.read(in_waiting or 1)
                if data:
                    last_data_time = time.time()
                    text = data.decode('utf-8', errors='ignore')
                    
                    logger.debug(f"üîç [SERIAL] Dados recebidos: {repr(text)}")
                    logger.info(f"üì° [SERIAL] Recebidos {len(data)} bytes: {repr(text[:100])}...")
                    
                    buffer += text
                    
                    logger.debug(f"üîç [SERIAL] Buffer atual (tamanho: {len(buffer)}): {repr(buffer[-100:])}")  # Mostra √∫ltimos 100 chars
                    
                    if '\n' in buffer:
                        lines = buffer.split('\n')
                        buffer = lines[-1]
                        
                        logger.debug(f"üîç [SERIAL] {len(lines)-1} linhas completas encontradas")
                        
                        for line in lines[:-1]:
                            line = line.strip()
                            logger.debug(f"üîç [SERIAL] Processando linha: {repr(line)}")
                            
                            if '-----Human Detected-----' in line:
                                if not message_mode:
                                    logger.debug(f"üîç [SERIAL] Iniciando captura de mensagem completa...")
                                    logger.info(f"üéØ [SERIAL] DETEC√á√ÉO DE PESSOA ENCONTRADA!")
                                    message_mode = True
                                    message_buffer = line + '\n'
                                    target_data_complete = False
                                    self.messages_received += 1
                                    logger.debug(f"üîç [SERIAL] Mensagem #{self.messages_received} iniciada")
                            elif message_mode:
                                message_buffer += line + '\n'
                                logger.debug(f"üîç [SERIAL] Adicionando √† mensagem: {repr(line)}")
                                
                                if 'move_speed:' in line:
                                    logger.debug(f"üîç [SERIAL] Mensagem completa detectada! Processando...")
                                    logger.debug(f"üîç [SERIAL] Mensagem final: {repr(message_buffer)}")
                                    logger.info(f"‚úÖ [SERIAL] MENSAGEM COMPLETA - PROCESSANDO...")
                                    
                                    target_data_complete = True
                                    self.process_radar_data(message_buffer)
                                    self.last_valid_data_time = time.time()  # Atualiza SOMENTE ao processar mensagem completa
                                    
                                    message_mode = False
                                    message_buffer = ""
                                    target_data_complete = False
                                    
                                    # Mostra resumo peri√≥dico
                                    if self.messages_received % 5 == 0:
                                        logger.info(f"üìä [RESUMO] Mensagens recebidas: {self.messages_received}, Processadas: {self.messages_processed}, Falharam: {self.messages_failed}")
                
                current_time = time.time()
                if current_time - self.last_valid_data_time > self.RESET_TIMEOUT:
                    logger.warning("‚ö†Ô∏è Nenhum dado recebido por mais de 1 minuto. Executando reset autom√°tico da ESP32 via DTR/RTS...")
                    self.hardware_reset_esp32()
                    self.last_valid_data_time = current_time
                    
                if time.time() - last_data_time > 5:
                    logger.warning("‚ö†Ô∏è Nenhum dado recebido nos √∫ltimos 5 segundos")
                    last_data_time = time.time()
                    
                time.sleep(0.01)
                
            except Exception as e:
                logger.error(f"‚ùå Erro no loop de recep√ß√£o: {str(e)}")
                logger.error(traceback.format_exc())
                time.sleep(1)

    def reset_radar(self):
        """Executa um reset no radar"""
        try:
            logger.warning("üîÑ [RESET] Iniciando reset do radar por inatividade de dados...")
            # Desconecta o radar
            if self.serial_connection and self.serial_connection.is_open:
                logger.info("[RESET] Fechando conex√£o serial antes do reset...")
                self.serial_connection.close()
                time.sleep(1)  # Aguarda 1 segundo
            else:
                logger.info("[RESET] Conex√£o serial j√° estava fechada.")
            # Reconecta o radar
            logger.info(f"[RESET] Reabrindo conex√£o serial na porta {self.port}...")
            self.serial_connection = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                timeout=1,
                write_timeout=1,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE
            )
            logger.info("[RESET] Conex√£o serial reestabelecida.")
            # Envia comando de reset (ajuste conforme necess√°rio para seu radar)
            logger.info("[RESET] Enviando comando de reset para o radar...")
            self.serial_connection.write(b'RESET\n')
            time.sleep(2)  # Aguarda 2 segundos para o reset completar
            logger.info("‚úÖ [RESET] Reset do radar conclu√≠do com sucesso!")
            return True
        except Exception as e:
            logger.error(f"‚ùå [RESET] Erro ao resetar o radar: {str(e)}")
            logger.error(traceback.format_exc())
            return False

    def _check_engagement(self, section_id, distance, move_speed):
        # Adiciona leitura ao buffer
        self.engagement_buffer.append({
            'section_id': section_id,
            'distance': distance,
            'move_speed': move_speed,
            'timestamp': time.time()
        })
        # Mant√©m o buffer no tamanho da janela
        if len(self.engagement_buffer) > self.ENGAGEMENT_WINDOW:
            self.engagement_buffer.pop(0)
        # Filtra leituras v√°lidas
        valid = [e for e in self.engagement_buffer if e['section_id'] == section_id and e['distance'] <= self.ENGAGEMENT_DISTANCE and e['move_speed'] <= self.ENGAGEMENT_SPEED]
        # Engajamento se houver pelo menos ENGAGEMENT_MIN_COUNT leituras consecutivas v√°lidas
        if len(valid) >= self.ENGAGEMENT_MIN_COUNT:
            return True
        return False

    def process_radar_data(self, raw_data):
        logger.debug(f"üîç [PROCESS] Iniciando processamento dos dados do radar...")
        logger.debug(f"üîç [PROCESS] Dados brutos recebidos: {repr(raw_data)}")
        
        data = parse_serial_data(raw_data)
        if not data:
            logger.debug(f"üîç [PROCESS] Parse falhou - dados inv√°lidos ou incompletos")
            self.messages_failed += 1
            logger.warning(f"‚ùå [PROCESS] Mensagem falhou no parse! Total de falhas: {self.messages_failed}")
            return

        logger.debug(f"üîç [PROCESS] Parse bem-sucedido: {data}")
        self.messages_processed += 1
        logger.info(f"‚úÖ [PROCESS] Mensagem processada com sucesso! Total processadas: {self.messages_processed}")

        # Extrair dados relevantes
        x = data.get('x_point', 0)
        y = data.get('y_point', 0)
        move_speed = abs(data.get('dop_index', 0) * RANGE_STEP)
        
        logger.debug(f"üîç [PROCESS] Coordenadas: x={x}, y={y}, velocidade={move_speed}")
        
        # Verifica se √© uma nova pessoa
        if self._is_new_person(x, y, move_speed):
            logger.debug(f"üîç [PROCESS] Nova pessoa detectada!")
            self.current_session_id = self._generate_session_id()
            self.last_activity_time = time.time()
            self.session_positions = []
        else:
            logger.debug(f"üîç [PROCESS] Pessoa j√° conhecida - mantendo sess√£o {self.current_session_id}")
        
        # Atualiza posi√ß√£o atual
        self.last_position = (x, y)
        self.session_positions.append({
            'x': x,
            'y': y,
            'speed': move_speed,
            'timestamp': time.time()
        })
        
        # Mant√©m apenas as √∫ltimas 10 posi√ß√µes
        if len(self.session_positions) > 10:
            self.session_positions.pop(0)

        # Atualiza a sess√£o
        self._update_session()

        logger.debug(f"üîç [PROCESS] Sess√£o atual: {self.current_session_id}")

        # Usar os valores de batimentos e respira√ß√£o diretamente do radar se dispon√≠veis
        heart_rate = data.get('heart_rate')
        breath_rate = data.get('breath_rate')
        
        logger.debug(f"üîç [PROCESS] Sinais vitais brutos: HR={heart_rate}, BR={breath_rate}")
        
        # Se n√£o houver valores diretos, calcular usando as fases
        if heart_rate is None or breath_rate is None:
            logger.debug(f"üîç [PROCESS] Calculando sinais vitais usando fases...")
            heart_rate, breath_rate = self.vital_signs_manager.calculate_vital_signs(
                data.get('total_phase', 0),
                data.get('breath_phase', 0),
                data.get('heart_phase', 0),
                data.get('distance', 0)
            )
            logger.debug(f"üîç [PROCESS] Sinais vitais calculados: HR={heart_rate}, BR={breath_rate}")
        
        distance = data.get('distance', 0)
        if distance == 0:
            x = data.get('x_point', 0)
            y = data.get('y_point', 0)
            distance = (x**2 + y**2)**0.5
            logger.debug(f"üîç [PROCESS] Dist√¢ncia calculada: {distance}")
        
        dop_index = data.get('dop_index', 0)
        move_speed = abs(dop_index * RANGE_STEP) if dop_index is not None else 0
        
        converted_data = {
            'session_id': self.current_session_id,
            'x_point': data.get('x_point', 0),
            'y_point': data.get('y_point', 0),
            'move_speed': move_speed,
            'distance': distance,
            'dop_index': dop_index,
            'heart_rate': heart_rate,
            'breath_rate': breath_rate,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        logger.debug(f"üîç [PROCESS] Dados convertidos: {converted_data}")
        
        section = shelf_manager.get_section_at_position(
            converted_data['x_point'],
            converted_data['y_point'],
            self.db_manager
        )
        
        if section:
            logger.debug(f"üîç [PROCESS] Se√ß√£o encontrada: {section['section_name']} (ID: {section['section_id']})")
            converted_data['section_id'] = section['section_id']
            converted_data['product_id'] = section['product_id']
        else:
            logger.debug(f"üîç [PROCESS] Nenhuma se√ß√£o encontrada - pessoa fora da √°rea monitorada")
            converted_data['section_id'] = None
            converted_data['product_id'] = None
        
        # L√≥gica de engajamento
        is_engaged = False
        if section:
            is_engaged = self._check_engagement(section['section_id'], distance, move_speed)
            logger.debug(f"üîç [PROCESS] Engajamento calculado: {is_engaged}")
        
        converted_data['is_engaged'] = is_engaged
        
        satisfaction_score, satisfaction_class = self.analytics_manager.calculate_satisfaction_score(
            move_speed, heart_rate, breath_rate, distance
        )
        converted_data['satisfaction_score'] = satisfaction_score
        converted_data['satisfaction_class'] = satisfaction_class
        
        logger.debug(f"üîç [PROCESS] Satisfa√ß√£o calculada: {satisfaction_score} ({satisfaction_class})")
        logger.debug(f"üîç [PROCESS] Dados finais para envio: {converted_data}")

        # Formata√ß√£o da sa√≠da
        output = [
            "\n" + "="*50,
            "üì° DADOS DO RADAR",
            "="*50,
            f"‚è∞ {converted_data['timestamp']}",
            "-"*50
        ]
        
        if section:
            output.extend([
                f"üìç SE√á√ÉO: {section['section_name']}",
                f"   Produto ID: {section['product_id']}"
            ])
        else:
            output.extend([
                "üìç SE√á√ÉO: Fora da √°rea monitorada",
                "   Produto ID: N/A"
            ])
        
        output.extend([
            "-"*50,
            "üìä POSI√á√ÉO:",
            f"   X: {converted_data['x_point']:>6.2f} m",
            f"   Y: {converted_data['y_point']:>6.2f} m",
            f"   Dist√¢ncia: {converted_data['distance']:>6.2f} m",
            f"   Velocidade: {converted_data['move_speed']:>6.2f} cm/s",
            "-"*50,
            "‚ù§Ô∏è SINAIS VITAIS:"
        ])
        
        if heart_rate is not None and breath_rate is not None:
            output.extend([
                f"   Batimentos: {heart_rate:>6.1f} bpm",
                f"   Respira√ß√£o: {breath_rate:>6.1f} rpm"
            ])
        else:
            output.append("   ‚ö†Ô∏è Aguardando detec√ß√£o...")
        
        output.extend([
            "-"*50,
            "üéØ AN√ÅLISE:",
            f"   Engajamento: {'‚úÖ Sim' if is_engaged else '‚ùå N√£o'}",
            f"   Score: {converted_data['satisfaction_score']:>6.1f}",
            f"   Classifica√ß√£o: {converted_data['satisfaction_class']}",
            "="*50 + "\n"
        ])
        
        # Exibe a sa√≠da formatada
        logger.debug(f"üîç [PROCESS] Gerando sa√≠da formatada com {len(output)} linhas...")
        logger.debug(f"üîç [PROCESS] Primeira linha da sa√≠da: {repr(output[0])}")
        logger.debug(f"üîç [PROCESS] √öltima linha da sa√≠da: {repr(output[-1])}")
        logger.info("\n".join(output))
        logger.debug(f"üîç [PROCESS] Sa√≠da formatada exibida!")
        
        # Verifica√ß√£o detalhada do db_manager
        logger.debug(f"üîç [PROCESS] Verificando db_manager...")
        logger.debug(f"üîç [PROCESS] self.db_manager: {self.db_manager}")
        logger.debug(f"üîç [PROCESS] self.db_manager √© None: {self.db_manager is None}")
        logger.debug(f"üîç [PROCESS] Tipo do db_manager: {type(self.db_manager)}")
        
        if self.db_manager:
            logger.debug(f"üîç [PROCESS] db_manager dispon√≠vel - iniciando envio...")
            logger.debug(f"üîç [PROCESS] Dados a serem enviados: {converted_data}")
            
            try:
                logger.debug(f"üîç [PROCESS] Chamando insert_radar_data...")
                success = self.db_manager.insert_radar_data(converted_data)
                logger.debug(f"üîç [PROCESS] Resultado do insert_radar_data: {success}")
                
                if success:
                    logger.info(f"‚úÖ [PROCESS] Dados enviados com sucesso para o Google Sheets!")
                    logger.debug(f"üîç [PROCESS] Dados enviados com sucesso para o banco/planilha!")
                else:
                    logger.error("‚ùå [PROCESS] insert_radar_data retornou False")
                    logger.error("‚ùå Falha ao enviar dados para o Google Sheets")
                    
            except Exception as e:
                logger.error(f"‚ùå [PROCESS] Exce√ß√£o ao enviar para o Google Sheets: {str(e)}")
                logger.error(f"‚ùå Erro ao enviar para o Google Sheets: {str(e)}")
                logger.error(traceback.format_exc())
        else:
            logger.warning("‚ö†Ô∏è [PROCESS] db_manager n√£o dispon√≠vel")
            logger.warning("‚ö†Ô∏è Gerenciador de planilha n√£o dispon√≠vel")
            logger.debug(f"üîç [PROCESS] db_manager √© None - dados n√£o ser√£o enviados")
        
        logger.debug(f"üîç [PROCESS] Processamento da mensagem conclu√≠do!")

def main():
    logger.info("üöÄ Iniciando sistema de radar serial...")
    logger.debug(f"üîç [MAIN] Iniciando GoogleSheetsManager...")
    
    try:
        # Obt√©m o caminho absoluto do diret√≥rio onde o script est√° localizado
        script_dir = os.path.dirname(os.path.abspath(__file__))
        logger.debug(f"üîç [MAIN] Diret√≥rio do script: {script_dir}")
        
        # Verifica se j√° estamos na pasta serial_radar ou se precisamos navegar at√© ela
        if script_dir.endswith('serial_radar'):
            # J√° estamos na pasta serial_radar
            credentials_file_path = os.path.join(script_dir, 'credenciais.json')
            logger.debug(f"üîç [MAIN] J√° estamos na pasta serial_radar")
        else:
            # Precisamos navegar at√© a pasta serial_radar
            credentials_file_path = os.path.join(script_dir, 'serial_radar', 'credenciais.json')
            logger.debug(f"üîç [MAIN] Navegando at√© pasta serial_radar")
        
        logger.debug(f"üîç [MAIN] Caminho das credenciais: {credentials_file_path}")
        logger.debug(f"üîç [MAIN] Arquivo de credenciais existe: {os.path.exists(credentials_file_path)}")
        
        gsheets_manager = GoogleSheetsManager(credentials_file_path, 'codigo_rasp')
        logger.info("‚úÖ GoogleSheetsManager iniciado com sucesso!")
        logger.debug(f"üîç [MAIN] GoogleSheetsManager configurado")
        
        # Teste de conectividade do Google Sheets
        logger.debug(f"üîç [MAIN] Testando conex√£o com Google Sheets...")
        try:
            test_data = {
                'session_id': 'test_session',
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'x_point': 0.0,
                'y_point': 0.0,
                'move_speed': 0.0,
                'heart_rate': 0.0,
                'breath_rate': 0.0,
                'distance': 0.0,
                'section_id': None,
                'product_id': None,
                'satisfaction_score': 0.0,
                'satisfaction_class': 'TEST',
                'is_engaged': False
            }
            
            logger.debug(f"üîç [MAIN] Enviando dados de teste: {test_data}")
            test_result = gsheets_manager.insert_radar_data(test_data)
            logger.debug(f"üîç [MAIN] Resultado do teste: {test_result}")
            
            if test_result:
                logger.info("‚úÖ [MAIN] Teste do Google Sheets bem-sucedido!")
            else:
                logger.error("‚ùå [MAIN] Teste do Google Sheets falhou!")
                
        except Exception as e:
            logger.error(f"‚ùå [MAIN] Erro no teste do Google Sheets: {str(e)}")
            logger.error(traceback.format_exc())
        
        # Teste do parser com dados simulados
        logger.debug(f"üîç [MAIN] Testando parser com dados simulados...")
        test_radar_data = """-----Human Detected-----
Target 1:
x_point: 0.50
y_point: 1.20
dop_index: 6
move_speed: 15.20 cm/s
distance: 1.30
heart_rate: 75.0
breath_rate: 15.0"""
        
        logger.debug(f"üîç [MAIN] Dados simulados: {repr(test_radar_data)}")
        parsed_data = parse_serial_data(test_radar_data)
        logger.debug(f"üîç [MAIN] Resultado do parse: {parsed_data}")
        
        if parsed_data:
            logger.info("‚úÖ [MAIN] Parser funcionando corretamente!")
        else:
            logger.error("‚ùå [MAIN] Parser falhou com dados simulados!")
        
        # Teste completo do processamento
        logger.debug(f"üîç [MAIN] Testando processamento completo...")
        radar_manager_test = SerialRadarManager('/dev/ttyACM0', 115200)
        radar_manager_test.db_manager = gsheets_manager
        
        try:
            radar_manager_test.process_radar_data(test_radar_data)
            logger.info("‚úÖ [MAIN] Processamento completo funcionando!")
        except Exception as e:
            logger.error(f"‚ùå [MAIN] Erro no processamento completo: {str(e)}")
            logger.error(traceback.format_exc())
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar inst√¢ncia do GoogleSheetsManager: {e}")
        logger.debug(f"üîç [MAIN] Erro detalhado do GoogleSheetsManager: {str(e)}")
        logger.error(traceback.format_exc())
        return
    
    # Definindo a porta serial diretamente
    port = '/dev/ttyACM0'
    baudrate = int(os.getenv("SERIAL_BAUDRATE", "115200"))
    
    logger.debug(f"üîç [MAIN] Configura√ß√£o serial: porta={port}, baudrate={baudrate}")
    
    radar_manager = SerialRadarManager(port, baudrate)
    logger.debug(f"üîç [MAIN] SerialRadarManager criado")
    
    try:
        logger.info(f"üîÑ Iniciando SerialRadarManager...")
        logger.debug(f"üîç [MAIN] Chamando radar_manager.start()...")
        
        success = radar_manager.start(gsheets_manager)
        logger.debug(f"üîç [MAIN] Resultado do start(): {success}")
        
        if not success:
            logger.error("‚ùå Falha ao iniciar o gerenciador de radar serial")
            logger.debug(f"üîç [MAIN] Start() falhou - encerrando")
            return
        
        logger.info("="*50)
        logger.info("üöÄ Sistema Radar Serial iniciado com sucesso!")
        logger.info(f"üì° Porta serial: {radar_manager.port}")
        logger.info(f"üì° Baudrate: {radar_manager.baudrate}")
        logger.info("‚ö° Pressione Ctrl+C para encerrar")
        logger.info("="*50)
        
        logger.debug(f"üîç [MAIN] Sistema iniciado - entrando em loop principal...")
        
        # Contador para mostrar status peri√≥dico
        loop_count = 0
        
        while True:
            time.sleep(1)
            loop_count += 1
            
            # Mostra status a cada 30 segundos
            if loop_count % 30 == 0:
                logger.info(f"üìä [STATUS] Sistema rodando h√° {loop_count} segundos")
                logger.info(f"üìä [STATUS] Mensagens: Recebidas={radar_manager.messages_received}, Processadas={radar_manager.messages_processed}, Falharam={radar_manager.messages_failed}")
                logger.info(f"üìä [STATUS] Conex√£o serial: {'‚úÖ Ativa' if radar_manager.serial_connection and radar_manager.serial_connection.is_open else '‚ùå Inativa'}")
                logger.info(f"üìä [STATUS] Thread de recep√ß√£o: {'‚úÖ Ativa' if radar_manager.receive_thread and radar_manager.receive_thread.is_alive() else '‚ùå Inativa'}")
            
    except KeyboardInterrupt:
        logger.info("üîÑ Encerrando por interrup√ß√£o do usu√°rio...")
        logger.debug(f"üîç [MAIN] Recebido Ctrl+C - encerrando sistema...")
        
    finally:
        logger.debug(f"üîç [MAIN] Parando radar_manager...")
        radar_manager.stop()
        logger.info("‚úÖ Sistema encerrado!")
        logger.debug(f"üîç [MAIN] Sistema encerrado completamente")

if __name__ == "__main__":
    main() 
